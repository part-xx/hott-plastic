Predicate logic with equality:

> [True : Prop];
> [TrueI : True];

> [False : Prop];
> [FalseE : (P : Prop) False -> P];

> [Imp : Prop -> Prop -> Prop];
> [ImpI : (P,Q : Prop) (P -> Q) -> Imp P Q];
> [ImpE : (P,Q : Prop) Imp P Q -> P -> Q];

> [Not = [P : Prop] Imp P False];

> [And : Prop -> Prop -> Prop];
> [AndI : (P,Q : Prop) P -> Q -> And P Q];
> [AndE1 : (P,Q : Prop) And P Q -> P];
> [AndE2 : (P,Q : Prop) And P Q -> Q];

> [Or : Prop -> Prop -> Prop];
> [OrI1 : (P,Q : Prop) P -> Or P Q];
> [OrI2 : (P,Q : Prop) Q -> Or P Q];
> [OrE : (P,Q,R : Prop) Or P Q -> (P -> R) -> (Q -> R) -> R];

> [Iff = [P,Q : Prop] And (Imp P Q) (Imp Q P)];

> [All : (A : Type) (A -> Prop) -> Prop];
> [AllI : (A : Type) (P : A -> Prop) ((x : A) P x) -> All A P];
> [AllE : (A : Type) (P : A -> Prop) (a : A) All A P -> P a];

> [Ex : (A : Type) (A -> Prop) -> Prop];
> [ExI : (A : Type) (P : A -> Prop) (a : A) P a -> Ex A P];
> [ExE : (A : Type) (P : A -> Prop) (Q : Prop) Ex A P -> ((x : A) P x -> Q) -> Q];

> [Eq : (A : Type) A -> A -> Prop];
> [EqI : (A : Type) (a : A) Eq A a a];
> [EqE : (A : Type) (P : A -> Prop) (a,b : A) Eq A a b -> P a -> P b];

Sets

> [Set : Type -> Type];
> [set : (A : Type) (A -> Prop) -> Set A];
> [in : (A : Type) A -> Set A -> Prop];

Computation rule : (a in {x : A | P x}) --> P a
Note: even though we never compute with proof terms, we *do* want to compute with propositions

> SimpleElimRule Set in 2
> [ set 2 = [A : Type] [a : A]
>           [_ : Type] [P : A -> Prop]
>           P a
>         : (A : Type) (a : A)
>           (_ : Type) (P : A -> Prop)
>           Prop ];

> [empty = [A : Type] set A [_:A] False];
> [full = [A : Type] set A [_:A] True];
> [add = [A : Type] [X : Set A] [a : A] set A [x : A] Or (in A x X) (Eq A x a)];
add A X a = X u {a}
> [minus = [A : Type] [X : Set A] [a : A] set A [x : A] And (in A x X) (Not (Eq A x a))];
minus A X a = X \ {a}

Let's give ourselves the natural numbers:

> Inductive [Nat:Type] Constructors [zero:Nat] [succ:(n:Nat)Nat];

... with the ability to prove things by induction

> [Ind : (P : Nat -> Prop) P zero -> ((n : Nat) P n -> P (succ n)) ->
>    (n : Nat) P n];

> [plus = [x,y:Nat] E_Nat ([_:Nat]Nat) y ([_:Nat]succ) x ];

The following proof crashes Plastic:

 Claim plus_assoc : (m,n,p : Nat) Prf(Eq Nat (plus m (plus n p)) (plus (plus m n) p));
 Intros m n;
 Refine Ind; --- crash!

Here are some other things we'd like to do:

The set of all sets with at least n members, defined by recursion on n.

At_Least A n = {X : Set A | X has at least n members}

> [At_Least = [A : Type] E_Nat ([_:Nat] Set (Set A))
>    (full (Set A))
>    ([n : Nat] [at_least_n : Set (Set A)] set (Set A) [X : Set A]
>        Ex A [a : A] And (in A a X) (in (Set A) (minus A X a) at_least_n))];
> [at_least [A : Type] [X : Set A] [n : Nat] = in (Set A) X (At_Least A n)];

> [at_most [A : Type] [X : Set A] [n : Nat] =
>   Not (at_least A X (succ n))];

> [card [A : Type] [X : Set A] [n : Nat] = And (at_least A X n) (at_most A X n)];